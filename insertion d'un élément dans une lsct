#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int val;
    struct Node *next;
} Node;

Node* new_node(int x) {
    Node *p = malloc(sizeof(Node));
    if (!p) { perror("malloc"); exit(EXIT_FAILURE); }
    p->val = x; p->next = NULL;
    return p;
}

void print_slist(Node *h) {
    printf("[");
    for (Node *p = h; p != NULL; p = p->next) {
        printf("%d", p->val);
        if (p->next) printf(", ");
    }
    printf("]\n");
}

/* Insertion triée ascendante */
void insert_sorted(Node **head, int x) {
    Node *nn = new_node(x);
    if (*head == NULL || (*head)->val >= x) {
        nn->next = *head;
        *head = nn;
        return;
    }
    Node *p = *head;
    while (p->next && p->next->val < x) p = p->next;
    nn->next = p->next;
    p->next = nn;
}

/* Exemple d'utilisation */
int main(void) {
    Node *head = NULL;
    /* Construire une liste triée initiale : 1 -> 3 -> 5 */
    insert_sorted(&head, 1);
    insert_sorted(&head, 3);
    insert_sorted(&head, 5);
    printf("Liste initiale triée : ");
    print_slist(head);

    int to_insert[] = {0, 2, 4, 6, 3};
    for (int i=0;i<5;i++) {
        printf("Insertion de %d...\n", to_insert[i]);
        insert_sorted(&head, to_insert[i]);
        printf("-> "); print_slist(head);
    }

    /* libérer */
    while (head) {
        Node *t = head; head = head->next; free(t);
    }
    return 0;
}
